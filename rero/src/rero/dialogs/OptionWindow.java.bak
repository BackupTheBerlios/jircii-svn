package rero.dialogs;

import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.table.*;

import rero.config.*;
import rero.dck.*;

import rero.gui.*;

import java.util.*;

public class OptionWindow extends JDialog implements ListSelectionListener, DCapabilities
{ 
    private static OptionWindow dialog;

    JPanel content;
    JLabel title;

    LinkedList dialogs;
    String[]   items;

    public DMain current;

    public void forceSave()
    {
       if (current != null)
       {
          current.save();
          ClientState.getClientState().sync();
       }
    }


    public void refresh()
    {
       if (current != null)
          current.refresh();
    }

    public void closeDialog()
    {
       setVisible(false);
    }

    public void saveCurrent(DMain newDialog)
    {
       if (current != null)
       {
          current.save();
          ClientState.getClientState().sync();
       }

       current = newDialog;
    }

    public void buildTables()
    {
       dialogs = new LinkedList();

       dialogs.add(new SetupDialog());
       dialogs.add(new IdentDialog());
       dialogs.add(new NotifyDialog());
       dialogs.add(new IgnoreDialog());
       dialogs.add(new IRCOptions());
       dialogs.add(new DCCOptions());
       dialogs.add(new ScriptDialog());
       dialogs.add(new AutoWindowDialog());
       dialogs.add(new ImageDialog());
       dialogs.add(new UIDialog());
       dialogs.add(new ExternalDialog());

       items = new String[dialogs.size()];
      
       int y = 0;

       Iterator i = dialogs.iterator();
       while (i.hasNext())
       {
           DMain temp = (DMain)i.next();

           items[y] = temp.getTitle();
           temp.installCapabilities(this);

           y++;
       }
    }

    public void valueChanged(ListSelectionEvent e) 
    {
       if (e.getValueIsAdjusting())
       {
           return;
       }

       JList theList = (JList)e.getSource();

       DMain temp = (DMain)dialogs.get(theList.getSelectedIndex());
       title.setText(temp.getDescription());

       saveCurrent(temp);

       content.removeAll();
       content.add(temp.getDialog(), BorderLayout.CENTER);
       temp.refresh();

       content.revalidate();
       content.repaint();
    }

    private static Frame frame;

    public static void initialize(Component comp) 
    {
       if (JOptionPane.getFrameForComponent(comp) != frame)
       {
           frame = JOptionPane.getFrameForComponent(comp);
           dialog = new OptionWindow(frame);
       }
    }

    public static String showDialog(Component comp) 
    {
        // tell the client state to save the state
        KeyBindings.is_dialog_active = true;
        dialog.setLocationRelativeTo(comp);
        dialog.setVisible(true);

        dialog.addWindowListener(new WindowAdapter()
        {
           public void windowClosing(WindowEvent ev) { KeyBindings.is_dialog_active = false;  }
        });

        dialog.refresh();

        return "";
    }

    private OptionWindow(Frame frame) 
    {
        super(frame, "jIRC Options", false);

        buildTables();

        //
        //buttons
        //
        JButton closeButton = new JButton("OK");
        closeButton.setMnemonic('O');

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setMnemonic('C');

        closeButton.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent e) 
            {
                forceSave();
                OptionWindow.dialog.setVisible(false);
            }
        });
 
        cancelButton.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent e) 
            {
                // tell client state that we canceled

                OptionWindow.dialog.setVisible(false);
                dialog = null;
                OptionWindow.frame = null;
            }
        });

        getContentPane().setLayout(new BorderLayout(5, 5));
        
        JPanel main = new JPanel();
	main.setLayout(new BorderLayout(5, 5));
	main.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        getContentPane().add(main, BorderLayout.CENTER);

        //
	// Left - the tabbed pane and its doings
        //
        JPanel general = new JPanel();
        general.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        JPanel left = new JPanel();
        left.setBorder(BorderFactory.createEtchedBorder());
        left.setPreferredSize(new Dimension(160, 295));
        left.setLayout(new BorderLayout());
        left.add(general, BorderLayout.CENTER);

	//
        // General Tab
	//
        JList genOptions = new JList(items);
        genOptions.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        genOptions.addListSelectionListener(this);

        JScrollPane genScroller = new JScrollPane(genOptions);
        genScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        general.setLayout(new BorderLayout(5, 5));

        general.add(new JLabel("Options:"), BorderLayout.NORTH);
        general.add(genScroller, BorderLayout.CENTER);

        //
	// Center - the display pane and its doings
        //
        JPanel center = new JPanel();
	center.setLayout(new BorderLayout(5, 5));

        JPanel titlep = new JPanel();
        title = new JLabel("Configuration");
        
        titlep.add(title, BorderLayout.CENTER);
        titlep.setBorder(BorderFactory.createEtchedBorder());

        center.add(titlep, BorderLayout.NORTH);
		
        content = new JPanel();
        content.setLayout(new BorderLayout());
        content.setBorder(BorderFactory.createEtchedBorder());

        center.add(content, BorderLayout.CENTER);

        current = (DMain)dialogs.getFirst();

        content.add(((DMain)dialogs.getFirst()).getDialog(), BorderLayout.CENTER);
//        ((DMain)dialogs.getFirst()).refresh();

        //
	// Bottom - a Close button aligned to the right
	//
        JPanel south = new JPanel();
	south.setLayout(new BorderLayout(5, 5));

        JPanel evil = new JPanel();
        GridLayout gl = new GridLayout(1, 3);
        gl.setHgap(5);
        evil.setLayout(gl);
        evil.add(closeButton);
        evil.add(cancelButton);

	south.add(evil, BorderLayout.EAST);
        south.add(new JPanel(), BorderLayout.CENTER);

	//
	// putting it all together
	//
	main.add(left, BorderLayout.WEST);
	main.add(center, BorderLayout.CENTER);
        main.add(south, BorderLayout.SOUTH);

        pack();

	setSize(new Dimension(520, 363));
    }

    public static void main(String[] args) 
    {
       try
       {
           if (ClientState.getClientState().isOption("ui.native", ClientDefaults.ui_native))
           {
              UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
           }
           else if (args.length > 0)
           {
              UIManager.setLookAndFeel(args[0]);
           }
           else
           {
              UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
           }
        }
        catch (Exception e)
        {
           System.err.println("Could not load specified look and feel, using system default");
           e.printStackTrace();
        }


        JFrame f = new JFrame("Name That Baby");
        f.addWindowListener(new WindowAdapter() 
        {
            public void windowClosing(WindowEvent e) 
            {
                System.exit(0);
            }
        });

        OptionWindow.initialize(f);

        JButton button = new JButton("CLICK ME");
        f.getContentPane().setLayout(new BorderLayout());
	f.getContentPane().add(button);

	button.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent e) 
            {
               String selectedName = OptionWindow.showDialog(null);
               System.out.println(":::: "+selectedName);
	    }
        });

        f.pack();
        f.setVisible(true);
    }
}
